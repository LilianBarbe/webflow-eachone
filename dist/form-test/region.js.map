{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/form-test/getAdressApi.js", "../../src/form-test/region.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener(\"change\", () => location.reload());\n", "export const getAdress = async (search) => {\n  try {\n    const inputVille = document.getElementById(\"ville\");\n    const inputCodePostal = document.getElementById(\"codepostal\");\n    const inputNumberStreet = document.getElementById(\"numberStreet\");\n    const textAddress = document.querySelector(\".address_item\");\n    // S\u00E9lectionner le parent une seule fois\n    const parent = textAddress.parentNode;\n    // Nettoyer le contenu pr\u00E9c\u00E9dent\n    while (parent.children.length > 1) {\n      parent.removeChild(parent.lastChild);\n    }\n\n    const response = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${search}`);\n    const data = await response.json();\n\n    // Utiliser un format d'objet pour stocker plus d'infos sur chaque adresse\n    const addresses = data.features.map((feature) => ({\n      label: feature.properties.label,\n      city: feature.properties.city,\n      postcode: feature.properties.postcode,\n      context: feature.properties.context,\n      numero: feature.properties.housenumber,\n      nom: feature.properties.name,\n    }));\n\n    addresses.forEach((address) => {\n      const clone = textAddress.cloneNode(true);\n      const cloneLabel = clone.querySelector(\"[adress-label]\");\n      // const cloneCity = clone.querySelector(\"[adress-city]\");\n      const clonePostal = clone.querySelector(\"[adress-postal]\");\n      cloneLabel.textContent = address.label;\n      // cloneCity.textContent = address.city;\n      clonePostal.textContent = address.context;\n      clone.style.display = \"\"; // S'assurer que le clone est visible\n\n      // Ajouter un \u00E9couteur d'\u00E9v\u00E9nements pour chaque clone\n      clone.addEventListener(\"click\", () => {\n        inputVille.value = address.city;\n        inputCodePostal.value = address.postcode;\n        inputNumberStreet.value = address.nom;\n        document.getElementById(\"autoComplete\").value = address.label;\n        document.querySelector(\".adress_list\").style.display = \"none\";\n      });\n\n      parent.appendChild(clone);\n    });\n\n    // Cacher l'\u00E9l\u00E9ment d'origine apr\u00E8s avoir clon\u00E9 pour la premi\u00E8re adresse\n    textAddress.style.display = \"none\";\n\n    return addresses; // Retourner les adresses pourrait ne pas \u00EAtre n\u00E9cessaire si elles sont d\u00E9j\u00E0 g\u00E9r\u00E9es.\n  } catch (error) {\n    console.error(\"Error fetching or processing data:\", error);\n  }\n};\n", "import { getAdress } from \"$test/getAdressApi.js\";\n\nconst autoCompleteInput = document.getElementById(\"autoComplete\");\nlet adress;\n\ndocument.querySelector(\".adress_list\").style.display = \"none\";\n\n// \u00E0 l'input, renvoie un array de propositions\nautoCompleteInput.addEventListener(\"input\", function () {\n  adress = autoCompleteInput.value;\n  getAdress(adress);\n  document.querySelector(\".adress_list\").style.display = \"flex\";\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACAtF,MAAM,YAAY,OAAO,WAAW;AACzC,QAAI;AACF,YAAM,aAAa,SAAS,eAAe,OAAO;AAClD,YAAM,kBAAkB,SAAS,eAAe,YAAY;AAC5D,YAAM,oBAAoB,SAAS,eAAe,cAAc;AAChE,YAAM,cAAc,SAAS,cAAc,eAAe;AAE1D,YAAM,SAAS,YAAY;AAE3B,aAAO,OAAO,SAAS,SAAS,GAAG;AACjC,eAAO,YAAY,OAAO,SAAS;AAAA,MACrC;AAEA,YAAM,WAAW,MAAM,MAAM,8CAA8C,MAAM,EAAE;AACnF,YAAM,OAAO,MAAM,SAAS,KAAK;AAGjC,YAAM,YAAY,KAAK,SAAS,IAAI,CAAC,aAAa;AAAA,QAChD,OAAO,QAAQ,WAAW;AAAA,QAC1B,MAAM,QAAQ,WAAW;AAAA,QACzB,UAAU,QAAQ,WAAW;AAAA,QAC7B,SAAS,QAAQ,WAAW;AAAA,QAC5B,QAAQ,QAAQ,WAAW;AAAA,QAC3B,KAAK,QAAQ,WAAW;AAAA,MAC1B,EAAE;AAEF,gBAAU,QAAQ,CAAC,YAAY;AAC7B,cAAM,QAAQ,YAAY,UAAU,IAAI;AACxC,cAAM,aAAa,MAAM,cAAc,gBAAgB;AAEvD,cAAM,cAAc,MAAM,cAAc,iBAAiB;AACzD,mBAAW,cAAc,QAAQ;AAEjC,oBAAY,cAAc,QAAQ;AAClC,cAAM,MAAM,UAAU;AAGtB,cAAM,iBAAiB,SAAS,MAAM;AACpC,qBAAW,QAAQ,QAAQ;AAC3B,0BAAgB,QAAQ,QAAQ;AAChC,4BAAkB,QAAQ,QAAQ;AAClC,mBAAS,eAAe,cAAc,EAAE,QAAQ,QAAQ;AACxD,mBAAS,cAAc,cAAc,EAAE,MAAM,UAAU;AAAA,QACzD,CAAC;AAED,eAAO,YAAY,KAAK;AAAA,MAC1B,CAAC;AAGD,kBAAY,MAAM,UAAU;AAE5B,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,sCAAsC,KAAK;AAAA,IAC3D;AAAA,EACF;;;ACrDA,MAAM,oBAAoB,SAAS,eAAe,cAAc;AAChE,MAAI;AAEJ,WAAS,cAAc,cAAc,EAAE,MAAM,UAAU;AAGvD,oBAAkB,iBAAiB,SAAS,WAAY;AACtD,aAAS,kBAAkB;AAC3B,cAAU,MAAM;AAChB,aAAS,cAAc,cAAc,EAAE,MAAM,UAAU;AAAA,EACzD,CAAC;",
  "names": []
}
